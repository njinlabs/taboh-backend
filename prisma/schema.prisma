// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String     @unique
  password  String
  avatar    Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tokens    Token[]
  playlists Playlist[]
}

model Token {
  id        Int      @id @default(autoincrement())
  info      Json
  hashed    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Tag {
  id        Int               @id @default(autoincrement())
  name      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  playlists PlaylistsOnTags[]
}

model Playlist {
  id        Int               @id @default(autoincrement())
  title     String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  tags      PlaylistsOnTags[]
  songs     Song[]
}

model PlaylistsOnTags {
  playlistId Int
  tagId      Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([playlistId, tagId])
}

model Song {
  id          Int      @id @default(autoincrement())
  info        Json
  file        Json
  isReady     Boolean
  originalUrl String
  sourceType  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  playlistId  Int
  playlist    Playlist @relation(fields: [playlistId], references: [id])
}
